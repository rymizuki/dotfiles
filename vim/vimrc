"
" -----VIMRC
"

"-------------------------------------------
" Vandle
"-------------------------------------------
filetype off

set rtp+=~/.vim/vundle.git/
call vundle#rc()

"-------------------------------------------
" 基本設定
"-------------------------------------------

"国際化
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,cp932
set fileformats=unix,dos,mac
set ambiwidth=double

" syntax
syntax enable
"colorscheme delek
"colorscheme Light
colorscheme darkblue 

" filetype
if filereadable(expand('~/.vim/filetypes.vim'))
    source ~/.vim/filetypes.vim
endif

set ts=4
set shiftwidth=4
set expandtab
set smartindent
set autoindent
set ambiwidth=double
set showcmd
set showmode
set showmatch
set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<
set ruler
set nobackup
set hlsearch        " highlight
set virtualedit=block
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start

"コマンドライン補完を拡張モードへ
set wildmenu
set wildmode=list:full

"backup
set swapfile
set directory=~/.vimbackup
set backup
set backupdir=~/.vimbackup

" tab
set showtabline=2
set tabline=%!MyTabLine()
function MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        let s .= '%' . (i+1) . 'T' 
        let s .= ' ' . (i+1) . (1==getwinvar(i+1,'&modified')?'[+]':'') . ' %{MyTabLabel(' . (i+1) . ')} '
    endfor
    let s .= '%#TabLineFill#%T'
    if tabpagenr('$') > 1 
        let s .= '%=%#TabLine#%999Xclose'
    endif
    return s
endfunction
function MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    return bufname(buflist[winnr - 1]) 
endfunction

" tabcolor
hi TabLine     term=reverse cterm=reverse ctermfg=white ctermbg=black
hi TabLineSel  term=bold cterm=bold,underline ctermfg=9
hi TabLineFill term=reverse cterm=reverse ctermfg=white ctermbg=black

" show git status
if filereadable(expand('~/.vim/git_status.vim'))
    source ~/.vim/git_status.vim
endif

" keymap
nmap <ESC><ESC> :nohl<CR>
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap "" ""<LEFT>
inoremap '' ''<LEFT>
inoremap <> <><LEFT>
" perl TT
inoremap [% [%  %]<LEFT><LEFT><LEFT>
" perl TX::Syntax::Kolon
inoremap <: <:  :><LEFT><LEFT><LEFT>
" PHP
inoremap <?= <?= ?><LEFT><LEFT><LEFT>
inoremap <? <?  ?><LEFT><LEFT><LEFT>
" js
inoremap <% <% %><LEFT><LEFT><LEFT>
" カーソル操作
inoremap <C-b> <LEFT>
inoremap <C-f> <RIGHT>

" tabmap
" GNU screen likeなキーバインド
nnoremap :tn   :tabnew .<CR>
nnoremap <C-p> :tabn<CR>
nnoremap <C-n> :tabp<CR>
nnoremap <C-l> :ls<CR>:buffer

"
" LoadPluginsConfig

if filereadable(expand('~/.vim/vundle.vim'))
    source ~/.vim/vundle.vim
endif

" VimFiler
if filereadable(expand('~/.vim/vimfiler.vim'))
    source ~/.vim/vimfiler.vim
endif

" Align
if filereadable(expand('~/.vim/align.vim'))
    source ~/.vim/align.vim
endif

" NeoComplCache 
if filereadable(expand('~/.vim/neocomplcache.vim'))
    source ~/.vim/neocomplcache.vim
endif

" NeoSnippet
if filereadable(expand('~/.vim/neosnippet.vim'))
    source ~/.vim/neosnippet.vim
endif

" NERDTree
if filereadable(expand('~/.vim/nerdtree.vim'))
    source ~/.vim/nerdtree.vim
endif

" surround.vim
if filereadable(expand('~/.vim/surround.vim'))
    source ~/.vim/surround.vim
endif

" ZenCoding
if filereadable(expand('~/.vim/zencoding.vim'))
    source ~/.vim/zencoding.vim
endif
